<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WorldWind</name>
    </assembly>
    <members>
        <member name="T:gpxType">
            <remarks/>
        </member>
        <member name="F:gpxType.metadata">
            <remarks/>
        </member>
        <member name="F:gpxType.wpt">
            <remarks/>
        </member>
        <member name="F:gpxType.rte">
            <remarks/>
        </member>
        <member name="F:gpxType.trk">
            <remarks/>
        </member>
        <member name="F:gpxType.extensions">
            <remarks/>
        </member>
        <member name="F:gpxType.version">
            <remarks/>
        </member>
        <member name="F:gpxType.creator">
            <remarks/>
        </member>
        <member name="T:metadataType">
            <remarks/>
        </member>
        <member name="F:metadataType.name">
            <remarks/>
        </member>
        <member name="F:metadataType.desc">
            <remarks/>
        </member>
        <member name="F:metadataType.author">
            <remarks/>
        </member>
        <member name="F:metadataType.copyright">
            <remarks/>
        </member>
        <member name="F:metadataType.link">
            <remarks/>
        </member>
        <member name="F:metadataType.time">
            <remarks/>
        </member>
        <member name="F:metadataType.timeSpecified">
            <remarks/>
        </member>
        <member name="F:metadataType.keywords">
            <remarks/>
        </member>
        <member name="F:metadataType.bounds">
            <remarks/>
        </member>
        <member name="F:metadataType.extensions">
            <remarks/>
        </member>
        <member name="T:personType">
            <remarks/>
        </member>
        <member name="F:personType.name">
            <remarks/>
        </member>
        <member name="F:personType.email">
            <remarks/>
        </member>
        <member name="F:personType.link">
            <remarks/>
        </member>
        <member name="T:emailType">
            <remarks/>
        </member>
        <member name="F:emailType.id">
            <remarks/>
        </member>
        <member name="F:emailType.domain">
            <remarks/>
        </member>
        <member name="T:trksegType">
            <remarks/>
        </member>
        <member name="F:trksegType.trkpt">
            <remarks/>
        </member>
        <member name="F:trksegType.extensions">
            <remarks/>
        </member>
        <member name="T:wptType">
            <remarks/>
        </member>
        <member name="F:wptType.ele">
            <remarks/>
        </member>
        <member name="F:wptType.eleSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.time">
            <remarks/>
        </member>
        <member name="F:wptType.timeSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.magvar">
            <remarks/>
        </member>
        <member name="F:wptType.magvarSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.geoidheight">
            <remarks/>
        </member>
        <member name="F:wptType.geoidheightSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.name">
            <remarks/>
        </member>
        <member name="F:wptType.cmt">
            <remarks/>
        </member>
        <member name="F:wptType.desc">
            <remarks/>
        </member>
        <member name="F:wptType.src">
            <remarks/>
        </member>
        <member name="F:wptType.link">
            <remarks/>
        </member>
        <member name="F:wptType.sym">
            <remarks/>
        </member>
        <member name="F:wptType.type">
            <remarks/>
        </member>
        <member name="F:wptType.fix">
            <remarks/>
        </member>
        <member name="F:wptType.fixSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.sat">
            <remarks/>
        </member>
        <member name="F:wptType.hdop">
            <remarks/>
        </member>
        <member name="F:wptType.hdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.vdop">
            <remarks/>
        </member>
        <member name="F:wptType.vdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.pdop">
            <remarks/>
        </member>
        <member name="F:wptType.pdopSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.ageofdgpsdata">
            <remarks/>
        </member>
        <member name="F:wptType.ageofdgpsdataSpecified">
            <remarks/>
        </member>
        <member name="F:wptType.dgpsid">
            <remarks/>
        </member>
        <member name="F:wptType.extensions">
            <remarks/>
        </member>
        <member name="F:wptType.lat">
            <remarks/>
        </member>
        <member name="F:wptType.lon">
            <remarks/>
        </member>
        <member name="T:linkType">
            <remarks/>
        </member>
        <member name="F:linkType.text">
            <remarks/>
        </member>
        <member name="F:linkType.type">
            <remarks/>
        </member>
        <member name="F:linkType.href">
            <remarks/>
        </member>
        <member name="T:fixType">
            <remarks/>
        </member>
        <member name="F:fixType.none">
            <remarks/>
        </member>
        <member name="F:fixType.Item2d">
            <remarks/>
        </member>
        <member name="F:fixType.Item3d">
            <remarks/>
        </member>
        <member name="F:fixType.dgps">
            <remarks/>
        </member>
        <member name="F:fixType.pps">
            <remarks/>
        </member>
        <member name="T:extensionsType">
            <remarks/>
        </member>
        <member name="F:extensionsType.Any">
            <remarks/>
        </member>
        <member name="T:trkType">
            <remarks/>
        </member>
        <member name="F:trkType.name">
            <remarks/>
        </member>
        <member name="F:trkType.cmt">
            <remarks/>
        </member>
        <member name="F:trkType.desc">
            <remarks/>
        </member>
        <member name="F:trkType.src">
            <remarks/>
        </member>
        <member name="F:trkType.link">
            <remarks/>
        </member>
        <member name="F:trkType.number">
            <remarks/>
        </member>
        <member name="F:trkType.type">
            <remarks/>
        </member>
        <member name="F:trkType.extensions">
            <remarks/>
        </member>
        <member name="F:trkType.trkseg">
            <remarks/>
        </member>
        <member name="T:rteType">
            <remarks/>
        </member>
        <member name="F:rteType.name">
            <remarks/>
        </member>
        <member name="F:rteType.cmt">
            <remarks/>
        </member>
        <member name="F:rteType.desc">
            <remarks/>
        </member>
        <member name="F:rteType.src">
            <remarks/>
        </member>
        <member name="F:rteType.link">
            <remarks/>
        </member>
        <member name="F:rteType.number">
            <remarks/>
        </member>
        <member name="F:rteType.type">
            <remarks/>
        </member>
        <member name="F:rteType.extensions">
            <remarks/>
        </member>
        <member name="F:rteType.rtept">
            <remarks/>
        </member>
        <member name="T:boundsType">
            <remarks/>
        </member>
        <member name="F:boundsType.minlat">
            <remarks/>
        </member>
        <member name="F:boundsType.minlon">
            <remarks/>
        </member>
        <member name="F:boundsType.maxlat">
            <remarks/>
        </member>
        <member name="F:boundsType.maxlon">
            <remarks/>
        </member>
        <member name="T:copyrightType">
            <remarks/>
        </member>
        <member name="F:copyrightType.year">
            <remarks/>
        </member>
        <member name="F:copyrightType.license">
            <remarks/>
        </member>
        <member name="F:copyrightType.author">
            <remarks/>
        </member>
        <member name="T:WorldWind.NativeMethods">
            <summary>
             Interop functionality for WorldWind namespace
            </summary>
        </member>
        <member name="M:WorldWind.NativeMethods.FindWindow(System.String,System.String)">
            <summary>
            API function to find window based on WindowName and class.
            </summary>
        </member>
        <member name="M:WorldWind.NativeMethods.SendArgs(System.IntPtr,System.String)">
            <summary>
            Sends string arguments to running instance of World Wind.
            </summary>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.back">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.forward">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.go">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.outline">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:WorldWind.Properties.Resources.stop">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="T:MapTools.ShapeLib">
            <summary>
            .NET Framework wrapper for Shapefile C Library V1.2.10
            </summary>
            <remarks>
            Shapefile C Library is (c) 1998 Frank Warmerdam.  .NET wrapper provided by David Gancarz.  
            Please send error reports or other suggestions regarding this wrapper class to:
            dgancarz@cfl.rr.com or david.gancarz@cityoforlando.net
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPOpen(System.String,System.String)">
            <summary>
            The SHPOpen() function should be used to establish access to the two files for 
            accessing vertices (.shp and .shx). Note that both files have to be in the indicated 
            directory, and must have the expected extensions in lower case. The returned SHPHandle 
            is passed to other access functions, and SHPClose() should be invoked to recover 
            resources, and flush changes to disk when complete.
            </summary>
            <param name="szShapeFile">The name of the layer to access.  This can be the name of either 
            the .shp or the .shx file or can just be the path plus the basename of the pair.</param>
            <param name="szAccess">The fopen() style access string. At this time only "rb" (read-only binary) 
            and "rb+" (read/write binary) should be used.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreate(System.String,MapTools.ShapeLib.ShapeType)">
            <summary>
            The SHPCreate() function will create a new .shp and .shx file of the desired type.
            </summary>
            <param name="szShapeFile">The name of the layer to access. This can be the name of either 
            the .shp or the .shx file or can just be the path plus the basename of the pair.</param>
            <param name="shpType">The type of shapes to be stored in the newly created file. 
            It may be either ShapeType.Point, ShapeType.PolyLine, ShapeType.Polygon or ShapeType.MultiPoint.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPGetInfo(System.IntPtr,System.Int32@,MapTools.ShapeLib.ShapeType@,System.Double[],System.Double[])">
            <summary>
            The SHPGetInfo() function retrieves various information about shapefile as a whole. 
            The bounds are read from the file header, and may be inaccurate if the file was 
            improperly generated.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate()</param>
            <param name="pnEntities">A pointer to an integer into which the number of 
            entities/structures should be placed. May be NULL.</param>
            <param name="pshpType">A pointer to an integer into which the ShapeType of this file 
            should be placed. Shapefiles may contain either ShapeType.Point, ShapeType.PolyLine, ShapeType.Polygon or 
            ShapeType.MultiPoint entities. This may be NULL.</param>
            <param name="adfMinBound">The X, Y, Z and M minimum values will be placed into this 
            four entry array. This may be NULL. </param>
            <param name="adfMaxBound">The X, Y, Z and M maximum values will be placed into this 
            four entry array. This may be NULL.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPReadObject(System.IntPtr,System.Int32)">
            <summary>
            The SHPReadObject() call is used to read a single structure, or entity from the shapefile. 
            See the definition of the SHPObject structure for detailed information on fields of a SHPObject. 
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate().</param>
            <param name="iShape">The entity number of the shape to read. Entity numbers are between 0 
            and nEntities-1 (as returned by SHPGetInfo()).</param>
            <returns>SHPObject</returns>
            <remarks>
            SHPObject's returned from SHPReadObject() should be deallocated with SHPDestroyShape(). 
            SHPReadObject() will return NULL if an illegal iShape value is requested. 
            Note that the bounds placed into the SHPObject are those read from the file, and may not be correct. 
            For points the bounds are generated from the single point since bounds aren't normally provided 
            for point types. Generally the shapes returned will be of the type of the file as a whole. 
            However, any file may also contain type ShapeType.NullShape shapes which will have no geometry. 
            Generally speaking applications should skip rather than preserve them, as they usually 
            represented interactively deleted shapes.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPWriteObject(System.IntPtr,System.Int32,MapTools.ShapeLib.SHPObject)">
            <summary>
            The SHPWriteObject() call is used to write a single structure, or entity to the shapefile. 
            See the definition of the SHPObject structure for detailed information on fields of a SHPObject.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen("r+") or SHPCreate().</param>
            <param name="iShape">The entity number of the shape to write. 
            A value of -1 should be used for new shapes. </param>
            <param name="psObject">The shape to write to the file. This should have been created with SHPCreateObject(), 
            or SHPCreateSimpleObject().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPDestroyObject(MapTools.ShapeLib.SHPObject)">
            <summary>
            This function should be used to deallocate the resources associated with a SHPObject 
            when it is no longer needed, including those created with SHPCreateSimpleObject(), 
            SHPCreateObject() and returned from SHPReadObject().
            </summary>
            <param name="psObject">The object to deallocate.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPComputeExtents(MapTools.ShapeLib.SHPObject)">
            <summary>
            This function will recompute the extents of this shape, replacing the existing values 
            of the dfXMin, dfYMin, dfZMin, dfMMin, dfXMax, dfYMax, dfZMax, and dfMMax values based 
            on the current set of vertices for the shape. This function is automatically called by 
            SHPCreateObject() but if the vertices of an existing object are altered it should be 
            called again to fix up the extents.
            </summary>
            <param name="psObject">An existing shape object to be updated in place.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateObject(MapTools.ShapeLib.ShapeType,System.Int32,System.Int32,System.Int32[],MapTools.ShapeLib.PartType[],System.Int32,System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            The SHPCreateObject() function allows for the creation of objects (shapes). 
            This is normally used so that the SHPObject can be passed to SHPWriteObject() 
            to write it to the file.
            </summary>
            <param name="shpType">The ShapeType of the object to be created, such as ShapeType.Point, or ShapeType.Polygon.</param>
            <param name="nShapeId">The shapeid to be recorded with this shape.</param>
            <param name="nParts">The number of parts for this object. If this is zero for PolyLine, 
            or Polygon type objects, a single zero valued part will be created internally.</param>
            <param name="panPartStart">The list of zero based start vertices for the rings 
            (parts) in this object. The first should always be zero. This may be NULL if nParts is 0.</param>
            <param name="paPartType">The type of each of the parts. This is only meaningful for MultiPatch files. 
            For all other cases this may be NULL, and will be assumed to be PartType.Ring.</param>
            <param name="nVertices">The number of vertices being passed in padfX, padfY, and padfZ. </param>
            <param name="adfX">An array of nVertices X coordinates of the vertices for this object.</param>
            <param name="adfY">An array of nVertices Y coordinates of the vertices for this object.</param>
            <param name="adfZ">An array of nVertices Z coordinates of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <param name="adfM">An array of nVertices M (measure values) of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <returns>SHPObject</returns>
            <remarks>
            The SHPDestroyObject() function should be used to free 
            resources associated with an object allocated with SHPCreateObject(). This function 
            computes a bounding box for the SHPObject from the given vertices.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateSimpleObject(MapTools.ShapeLib.ShapeType,System.Int32,System.Double[],System.Double[],System.Double[])">
            <summary>
            The SHPCreateSimpleObject() function allows for the convenient creation of simple objects. 
            This is normally used so that the SHPObject can be passed to SHPWriteObject() to write it 
            to the file. The simple object creation API assumes an M (measure) value of zero for each vertex. 
            For complex objects (such as polygons) it is assumed that there is only one part, and that it 
            is of the default type (PartType.Ring). Use the SHPCreateObject() function for more sophisticated 
            objects. 
            </summary>
            <param name="shpType">The ShapeType of the object to be created, such as ShapeType.Point, or ShapeType.Polygon.</param>
            <param name="nVertices">The number of vertices being passed in padfX, padfY, and padfZ.</param>
            <param name="adfX">An array of nVertices X coordinates of the vertices for this object.</param>
            <param name="adfY">An array of nVertices Y coordinates of the vertices for this object.</param>
            <param name="adfZ">An array of nVertices Z coordinates of the vertices for this object. 
            This may be NULL in which case they are all assumed to be zero.</param>
            <returns>SHPObject</returns>
            <remarks>
            The SHPDestroyObject() function should be used to free resources associated with an 
            object allocated with SHPCreateSimpleObject().
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.SHPClose(System.IntPtr)">
            <summary>
            The SHPClose() function will close the .shp and .shx files, and flush all outstanding header 
            information to the files. It will also recover resources associated with the handle. 
            After this call the hSHP handle cannot be used again.
            </summary>
            <param name="hSHP">The handle previously returned by SHPOpen() or SHPCreate().</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTypeName(MapTools.ShapeLib.ShapeType)">
            <summary>
            Translates a ShapeType.* constant into a named shape type (Point, PointZ, Polygon, etc.)
            </summary>
            <param name="shpType">ShapeType enum</param>
            <returns>string</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPPartTypeName(MapTools.ShapeLib.PartType)">
            <summary>
            Translates a PartType enum into a named part type (Ring, Inner Ring, etc.)
            </summary>
            <param name="partType">PartType enum</param>
            <returns>string</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCreateTree(System.IntPtr,System.Int32,System.Int32,System.Double[],System.Double[])">
            <summary>
            Creates a quadtree index
            </summary>
            <param name="hSHP"></param>
            <param name="nDimension"></param>
            <param name="nMaxDepth"></param>
            <param name="adfBoundsMin"></param>
            <param name="adfBoundsMax"></param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPDestroyTree(System.IntPtr)">
            <summary>
            Releases resources associated with quadtree
            </summary>
            <param name="hTree"></param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeAddShapeId(System.IntPtr,MapTools.ShapeLib.SHPObject)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <param name="psObject"></param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeTrimExtraNodes(System.IntPtr)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPTreeFindLikelyShapes(System.IntPtr,System.Double[],System.Double[],System.Int32@)">
            <summary>
            
            </summary>
            <param name="hTree"></param>
            <param name="adfBoundsMin"></param>
            <param name="adfBoundsMax"></param>
            <param name="pnShapeCount"></param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.SHPCheckBoundsOverlap(System.Double[],System.Double[],System.Double[],System.Double[],System.Int32)">
            <summary>
            
            </summary>
            <param name="adfBox1Min"></param>
            <param name="adfBox1Max"></param>
            <param name="adfBox2Min"></param>
            <param name="adfBox2Max"></param>
            <param name="nDimension"></param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFOpen(System.String,System.String)">
            <summary>
            The DBFOpen() function should be used to establish access to an existing xBase format table file. 
            The returned DBFHandle is passed to other access functions, and DBFClose() should be invoked 
            to recover resources, and flush changes to disk when complete. The DBFCreate() function should 
            called to create new xBase files. As a convenience, DBFOpen() can be called with the name of a 
            .shp or .shx file, and it will figure out the name of the related .dbf file.
            </summary>
            <param name="szDBFFile">The name of the xBase (.dbf) file to access.</param>
            <param name="szAccess">The fopen() style access string. At this time only "rb" (read-only binary) 
            and "rb+" (read/write binary) should be used.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFCreate(System.String)">
            <summary>
            The DBFCreate() function creates a new xBase format file with the given name, 
            and returns an access handle that can be used with other DBF functions. 
            The newly created file will have no fields, and no records. 
            Fields should be added with DBFAddField() before any records add written. 
            </summary>
            <param name="szDBFFile">The name of the xBase (.dbf) file to create.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldCount(System.IntPtr)">
            <summary>
            The DBFGetFieldCount() function returns the number of fields currently defined 
            for the indicated xBase file. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetRecordCount(System.IntPtr)">
            <summary>
            The DBFGetRecordCount() function returns the number of records that exist on the xBase 
            file currently. Note that with shape files one xBase record exists for each shape in the 
            .shp/.shx files.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFAddField(System.IntPtr,System.String,MapTools.ShapeLib.DBFFieldType,System.Int32,System.Int32)">
            <summary>
            The DBFAddField() function is used to add new fields to an existing xBase file opened with DBFOpen(), 
            or created with DBFCreate(). Note that fields can only be added to xBase files with no records, 
            though this is limitation of this API, not of the file format. Returns the field number of the 
            new field, or -1 if the addition of the field failed
            </summary>
            <param name="hDBF">The access handle for the file to be updated, as returned by DBFOpen(), 
            or DBFCreate().</param>
            <param name="szFieldName">The name of the new field. At most 11 character will be used. 
            In order to use the xBase file in some packages it may be necessary to avoid some special 
            characters in the field names such as spaces, or arithmetic operators.</param>
            <param name="eType">One of FTString, FTInteger, FTLogical, or FTDouble in order to establish the 
            type of the new field. Note that some valid xBase field types cannot be created such as date fields.</param>
            <param name="nWidth">The width of the field to be created. For FTString fields this establishes 
            the maximum length of string that can be stored. For FTInteger this establishes the number of 
            digits of the largest number that can be represented. For FTDouble fields this in combination 
            with the nDecimals value establish the size, and precision of the created field.</param>
            <param name="nDecimals">The number of decimal places to reserve for FTDouble fields. 
            For all other field types this should be zero. For instance with nWidth=7, and nDecimals=3 
            numbers would be formatted similarly to `123.456'.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldInfo(System.IntPtr,System.Int32,System.Text.StringBuilder,System.Int32@,System.Int32@)">
            <summary>
            The DBFGetFieldInfo() returns the type of the requested field, which is one of the DBFFieldType 
            enumerated values. As well, the field name, and field width information can optionally be returned. 
            The field type returned does not correspond one to one with the xBase field types. 
            For instance the xBase field type for Date will just be returned as being FTInteger. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by DBFOpen(), 
            or DBFCreate().</param>
            <param name="iField">The field to be queried. This should be a number between 0 and n-1, 
            where n is the number fields on the file, as returned by DBFGetFieldCount().</param>
            <param name="szFieldName">If this pointer is not NULL the name of the requested field 
            will be written to this location. The pszFieldName buffer should be at least 12 character 
            is size in order to hold the longest possible field name of 11 characters plus a terminating 
            zero character.</param>
            <param name="pnWidth">If this pointer is not NULL, the width of the requested field will be 
            returned in the int pointed to by pnWidth. This is the width in characters. </param>
            <param name="pnDecimals">If this pointer is not NULL, the number of decimal places precision 
            defined for the field will be returned. This is zero for integer fields, or non-numeric fields.</param>
            <returns>DBFFieldType</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetFieldIndex(System.IntPtr,System.String)">
            <summary>
            Returns the index of the field matching this name, or -1 on failure. 
            The comparison is case insensitive. However, lengths must match exactly.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned 
            by DBFOpen(), or DBFCreate().</param>
            <param name="szFieldName">Name of the field to search for.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadIntegerAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadIntegerAttribute() will read the value of one field and return it as an integer. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>int</returns>
            <remarks>
            This can be used even with FTString fields, though the returned value will be zero if not 
            interpretable as a number.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadDoubleAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadDoubleAttribute() will read the value of one field and return it as a double. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>double</returns>
            <remarks>
            This can be used even with FTString fields, though the returned value will be zero if not 
            interpretable as a number.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadStringAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadStringAttribute() will read the value of one field and return it as a string. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>string</returns>
            <remarks>
            This function may be used on any field type (including FTInteger and FTDouble) and will 
            return the string representation stored in the .dbf file. The returned pointer is to an 
            internal buffer which is only valid untill the next DBF function call. It's contents may 
            be copied with normal string functions such as strcpy(), or strdup(). If the 
            TRIM_DBF_WHITESPACE macro is defined in shapefil.h (it is by default) then all leading and 
            trailing space (ASCII 32) characters will be stripped before the string is returned.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadLogicalAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFReadLogicalAttribute() will read the value of one field and return it as a boolean. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>bool</returns>
            <remarks>
            This can be used with FTString fields, in which case it returns TRUE if the string="T";
            otherwise it returns FALSE.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFIsAttributeNULL(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            This function will return TRUE if the indicated field is NULL valued otherwise FALSE. 
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) from which the field value should be read.</param>
            <param name="iField">The field within the selected record that should be read.</param>
            <returns>int</returns>
            <remarks>
            Note that NULL fields are represented in the .dbf file as having all spaces in the field. 
            Reading NULL fields will result in a value of 0.0 or an empty string with the other 
            DBFRead*Attribute() functions.
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteIntegerAttribute(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
            The DBFWriteIntegerAttribute() function is used to write a value to a numeric field 
            (FTInteger, or FTDouble). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned. If the value is too large to fit in the field, 
            it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="nFieldValue">The integer value that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteDoubleAttribute(System.IntPtr,System.Int32,System.Int32,System.Double)">
            <summary>
            The DBFWriteDoubleAttribute() function is used to write a value to a numeric field 
            (FTInteger, or FTDouble). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned. If the value is too large to fit in the field, 
            it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="dFieldValue">The floating point value that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteStringAttribute(System.IntPtr,System.Int32,System.Int32,System.String)">
            <summary>
            The DBFWriteStringAttribute() function is used to write a value to a string field (FString). 
            If the write succeeds the value TRUE willbe returned, otherwise FALSE will be returned. 
            If the value is too large to fit in the field, it will be truncated and FALSE returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="szFieldValue">The string to be written to the field.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteNULLAttribute(System.IntPtr,System.Int32,System.Int32)">
            <summary>
            The DBFWriteNULLAttribute() function is used to clear the indicated field to a NULL value. 
            In the .dbf file this is represented by setting the entire field to spaces. If the write 
            succeeds the value TRUE will be returned, otherwise FALSE will be returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteLogicalAttribute(System.IntPtr,System.Int32,System.Int32,System.Boolean)">
            <summary>
            The DBFWriteLogicalAttribute() function is used to write a boolean value to a logical field 
            (FTLogical). If the write succeeds the value TRUE will be returned, 
            otherwise FALSE will be returned.
            </summary>
            <param name="hDBF">The access handle for the file to be written, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="iShape">The record number (shape number) to which the field value should be written.</param>
            <param name="iField">The field within the selected record that should be written.</param>
            <param name="bFieldValue">The boolean value to be written to the field.</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFReadTuple(System.IntPtr,System.Int32)">
            <summary>
            Reads the attribute fields of a record.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="hEntity">The entity (record) number to be read</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFWriteTuple(System.IntPtr,System.Int32,System.IntPtr)">
            <summary>
            Writes an attribute record to the file.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="hEntity">The zero-based entity (record) number to be written.  If hEntity equals 
            the number of records a new record is appended.</param>
            <param name="pRawTuple">Pointer to the tuple to be written</param>
            <returns>int</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFCloneEmpty(System.IntPtr,System.String)">
            <summary>
            Copies the data structure of an xBase file to another xBase file.  
            Data are not copied.  Use Read/WriteTuple functions to selectively copy data.
            </summary>
            <param name="hDBF">The access handle for the file to be queried, as returned by 
            DBFOpen(), or DBFCreate().</param>
            <param name="szFilename">The name of the xBase (.dbf) file to create.</param>
            <returns>IntPtr</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFClose(System.IntPtr)">
            <summary>
            The DBFClose() function will close the indicated xBase file (opened with DBFOpen(), 
            or DBFCreate()), flushing out all information to the file on disk, and recovering 
            any resources associated with having the file open. The file handle (hDBF) should not 
            be used again with the DBF API after calling DBFClose().
            </summary>
            <param name="hDBF">The access handle for the file to be closed.</param>
            <returns>void</returns>
        </member>
        <member name="M:MapTools.ShapeLib.DBFGetNativeFieldType(System.IntPtr,System.Int32)">
            <summary>
            This function returns the DBF type code of the indicated field.
            </summary>
            <param name="hDBF">The access handle for the file.</param>
            <param name="iField">The field index to query.</param>
            <returns>sbyte</returns>
            <remarks>
            Return value will be one of:
            <list type="bullet">
            <item><term>C</term><description>String</description></item>
            <item><term>D</term><description>Date</description></item>
            <item><term>F</term><description>Float</description></item>
            <item><term>N</term><description>Numeric, with or without decimal</description></item>
            <item><term>L</term><description>Logical</description></item>
            <item><term>M</term><description>Memo: 10 digits .DBT block ptr</description></item>
            <item><term> </term><description>field out of range</description></item>
            </list>
            </remarks>
        </member>
        <member name="M:MapTools.ShapeLib.#ctor">
            <summary>
            private constructor:  no instantiation needed or permitted
            </summary>
        </member>
        <member name="T:MapTools.ShapeLib.ShapeType">
            <summary>
            Shape type enumeration
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.NullShape">
            <summary>Shape with no geometric data</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.Point">
            <summary>2D point</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLine">
            <summary>2D polyline</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.Polygon">
            <summary>2D polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPoint">
            <summary>Set of 2D points</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PointZ">
            <summary>3D point</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLineZ">
            <summary>3D polyline</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolygonZ">
            <summary>3D polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPointZ">
            <summary>Set of 3D points</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PointM">
            <summary>3D point with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolyLineM">
            <summary>3D polyline with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.PolygonM">
            <summary>3D polygon with measure</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPointM">
            <summary>Set of 3d points with measures</summary>
        </member>
        <member name="F:MapTools.ShapeLib.ShapeType.MultiPatch">
            <summary>Collection of surface patches</summary>
        </member>
        <member name="T:MapTools.ShapeLib.PartType">
            <summary>
            Part type enumeration - everything but ShapeType.MultiPatch just uses PartType.Ring.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.TriangleStrip">
            <summary>
            Linked strip of triangles, where every vertex (after the first two) completes a new triangle.
            A new triangle is always formed by connecting the new vertex with its two immediate predecessors.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.TriangleFan">
            <summary>
            A linked fan of triangles, where every vertex (after the first two) completes a new triangle.
            A new triangle is always formed by connecting the new vertex with its immediate predecessor 
            and the first vertex of the part.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.OuterRing">
            <summary>The outer ring of a polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.InnerRing">
            <summary>The first ring of a polygon</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.FirstRing">
            <summary>The outer ring of a polygon of an unspecified type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.PartType.Ring">
            <summary>A ring of a polygon of an unspecified type</summary>
        </member>
        <member name="T:MapTools.ShapeLib.SHPObject">
            <summary>
            SHPObject - represents on shape (without attributes) read from the .shp file.
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.shpType">
            <summary>Shape type as a ShapeType enum</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nShapeId">
            <summary>Shape number (-1 is unknown/unassigned)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nParts">
            <summary>Number of parts (0 implies single part with no info)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.paPartStart">
            <summary>Pointer to int array of part start offsets, of size nParts</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.paPartType">
            <summary>Pointer to PartType array (PartType.Ring if not ShapeType.MultiPatch) of size nParts</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.nVertices">
            <summary>Number of vertices</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfX">
            <summary>Pointer to double array containing X coordinates</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfY">
            <summary>Pointer to double array containing Y coordinates</summary>		
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfZ">
            <summary>Pointer to double array containing Z coordinates (all zero if not provided)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.padfM">
            <summary>Pointer to double array containing Measure coordinates(all zero if not provided)</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfXMin">
            <summary>Bounding rectangle's min X</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfYMin">
            <summary>Bounding rectangle's min Y</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfZMin">
            <summary>Bounding rectangle's min Z</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfMMin">
            <summary>Bounding rectangle's min M</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfXMax">
            <summary>Bounding rectangle's max X</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfYMax">
            <summary>Bounding rectangle's max Y</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfZMax">
            <summary>Bounding rectangle's max Z</summary>	
        </member>
        <member name="F:MapTools.ShapeLib.SHPObject.dfMMax">
            <summary>Bounding rectangle's max M</summary>	
        </member>
        <member name="T:MapTools.ShapeLib.DBFFieldType">
            <summary>
            xBase field type enumeration
            </summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTString">
            <summary>String data type</summary> 
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTInteger">
            <summary>Integer data type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTDouble">
            <summary>Double data type</summary> 
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTLogical">
            <summary>Logical data type</summary>
        </member>
        <member name="F:MapTools.ShapeLib.DBFFieldType.FTInvalid">
            <summary>Invalid data type</summary>
        </member>
        <member name="T:WorldWind.MainApplication">
            <summary>
            World Wind main class
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.Main(System.String[])">
            <summary>
            The main entry point. Parses arguments, runs the MainApplication and saves settings
            </summary>
            <param name="args">The arguments to parse</param>
        </member>
        <member name="M:WorldWind.MainApplication.#ctor">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.MainApplication"/> class.
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.#cctor">
            <summary>
            Static constructor (gets called before instances are created)
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.Abort(System.String)">
            <summary>
            Display an error message to the user, then shut down world wind.
            </summary>
            <param name="errorMessages">The message (reason for shutdown) to display to the user.</param>
        </member>
        <member name="M:WorldWind.MainApplication.BrowseTo(System.String)">
            <summary>
            Try to open url in web browser
            Changed the function from static to non-static.
            </summary>
            <param name="url">The url to open in browser</param>
        </member>
        <member name="M:WorldWind.MainApplication.LoadAddon(System.String)">
            <summary>
            Loads a layer from an xml file and turns the layer on
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:WorldWind.MainApplication.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.InitializePluginCompiler">
            <summary>
            Compile and run plug-in "scripts"
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.menuItemWalkthrough_Click(System.Object,System.EventArgs)">
            <summary>
            Called when the user clicks Help -> Walkthrough, shows the WW Walkthrough to the user
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.menuItemLoadFile_Click(System.Object,System.EventArgs)">
            <summary>
            Shows file loading dialog
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.menuItemOptions_Click(System.Object,System.EventArgs)">
            <summary>
            Display Options dialog
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.menuItemConfigWizard_Click(System.Object,System.EventArgs)">
            <summary>
            Display Configuration Wizard
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.menuItemEditPaste_Click(System.Object,System.EventArgs)">
            <summary>
            Pastes the contents of the clipboard into the app
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.menuItemPluginManager_Click(System.Object,System.EventArgs)">
            <summary>
            Display the plugin manager.
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.menuItemBrowserOrientation_Click(System.Object,System.EventArgs)">
            <summary>
            Browser visibility and orientation methods
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:WorldWind.MainApplication.webBrowserVisible_Click(System.Object,System.EventArgs)">
            <summary>
            Sets visibility status of internal browser.
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.GetWWHandle">
            <summary>
            Returns the handle to currently running World Wind's window.
            </summary>
            <returns></returns>
        </member>
        <member name="M:WorldWind.MainApplication.WndProc(System.Windows.Forms.Message@)">
            <summary>
            All messages are sent to the WndProc method after getting filtered through 
            the PreProcessMessage method.  The WndProc method corresponds exactly to 
            the Windows WindowProc function.
            </summary>
            <param name="m">The Windows Message to process.</param>
        </member>
        <member name="M:WorldWind.MainApplication.QuickInstall(System.String)">
            <summary>
            Installs a file, copying to WW directory and loading
            </summary>
            <param name="path"></param>
        </member>
        <member name="M:WorldWind.MainApplication.LoadSettings">
            <summary>
            Deserializes and optionally decrypts settings
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.LoadSettings(System.String)">
            <summary>
            Deserializes and optionally decrypts settings, using specified location
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.ParseArgs(System.String[])">
            <summary>
            Parses command line arguments (starting with a '/' or a WorldWindUri)
            </summary>
            <param name="args">The command line arguments to parse</param>
        </member>
        <member name="M:WorldWind.MainApplication.UpdateToolBarStates">
            <summary>
            Updates function toolbar button pushed states
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.updateMenuItems">
            <summary>
            Updates MenuItem checkbox states
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.OpenStartupWorld">
            <summary>
            Loads world specified otherwise default 
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.OpenWorld(System.String)">
            <summary>
            Loads a new planet
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.GetLayerFontDescription(LayerSet.Type_DisplayFont2)">
            <summary>
            Builds a DirectX FontDescription object from a layer set font description.
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.Application_ThreadException(System.Object,System.Threading.ThreadExceptionEventArgs)">
            <summary>
            Occurs when an un-trapped thread exception is thrown, typically in UI event handlers.
            </summary>
        </member>
        <member name="M:WorldWind.MainApplication.HandleKeyUp(System.Windows.Forms.KeyEventArgs)">
            <summary>
            Handles key up events.
            </summary>
            <param name="e"></param>
            <returns>Returns true if the key is handled.</returns>
        </member>
        <member name="P:WorldWind.MainApplication.WorldWindow">
            <summary>
            The globe window
            </summary>
        </member>
        <member name="P:WorldWind.MainApplication.VerticalExaggeration">
            <summary>
            Sets the vertical exaggeration of the topography
            </summary>
        </member>
        <member name="P:WorldWind.MainApplication.MainMenu">
            <summary>
            WorldWind's main menu (drop-down)
            </summary>
        </member>
        <member name="P:WorldWind.MainApplication.ToolsMenu">
            <summary>
            WorldWind's Tools menu (drop-down)
            </summary>
        </member>
        <member name="P:WorldWind.MainApplication.ViewMenu">
            <summary>
            WorldWind's View menu (drop-down)
            </summary>
        </member>
        <member name="P:WorldWind.MainApplication.PluginsMenu">
            <summary>
            WorldWind's Plugins menu (drop-down)
            </summary>
        </member>
        <member name="P:WorldWind.MainApplication.CmdArgs">
            <summary>
            Gets command-line arguments for plugins
            </summary>
        </member>
        <member name="T:WorldWind.WplIndexEntry">
            <summary>
            Utility structure representing an index entry
            </summary>
        </member>
        <member name="T:WorldWind.IndexedTiledPlaceNameSet">
            <summary>
            utility class - combines TiledPlacenameSet with corresponding index
            </summary>
        </member>
        <member name="M:WorldWind.IndexedTiledPlaceNameSet.#ctor(LayerSet.Type_TiledPlacenameSet2,WorldWind.WplIndex)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.IndexedTiledPlaceNameSet"/> class. 
            Initializes placenameset and index.
            </summary>
            <param name="pns"></param>
            <param name="idx"></param>
        </member>
        <member name="T:WorldWind.PlaceItem">
            <summary>
            Utility class PlaceItem associates a WorldWindPlacename with its TiledPlacenameset aka "Layer"
            </summary>
        </member>
        <member name="F:WorldWind.PlaceItem.pn">
            <summary>
            Placename info from WorldWind 
            </summary>
        </member>
        <member name="F:WorldWind.PlaceItem.placeDescriptor">
            <summary>
            Associated TiledPlaceNameSe
            </summary>
        </member>
        <member name="M:WorldWind.PlaceItem.Goto(WorldWind.WorldWindow)">
            <summary>
            Goes to this place item at its lat/lon and altitude
            </summary>
            <param name="ww"></param>
        </member>
        <member name="M:WorldWind.PlaceItem.GotoURL(WorldWind.WorldWindow)">
            <summary>
            Computes a WorldWind URL (as string)
            </summary>
            <param name="ww"></param>
            <returns></returns>
        </member>
        <member name="P:WorldWind.PlaceItem.Altitude">
            <summary>
            Altitude accessor - either gets altitude from placeDescriptor
            or a default one (22500 currently)
            </summary>
        </member>
        <member name="T:WorldWind.IndexedPlace">
            <summary>
            This class is for index generation only - associates an index entry with a placename
            for later sorting
            </summary>
        </member>
        <member name="F:WorldWind.IndexedPlace.indexEntry">
            <summary>
            Index entry for this PlaceItem
            </summary>
        </member>
        <member name="T:WorldWind.PlaceItemComparer">
            <summary>
            Utility class to compare place items for sorting
            </summary>
        </member>
        <member name="M:WorldWind.PlaceItemComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer.Compare. Will compare the names of
            two PlaceItems
            </summary>
            <param name="x">First PlaceItem to compare</param>
            <param name="y">Second PlaceItem to compare</param>
            <returns>Result of PlaceItem name string comparison</returns>
        </member>
        <member name="T:WorldWind.WplIndex">
            <summary>
            Represents an index for a .WPL file.
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.#ctor(LayerSet.Type_TiledPlacenameSet2,System.String)">
            <summary>
            Initializes a new instance of the <see cref= "T:WorldWind.WplIndex"/> class. 
            Gets the full path to the list file as parameter
            Note that the constructor will neiter load the index data, nor create it if
            not present - all it does is "get ready" by loading the list of WWP files
            </summary>
            <param name="tps">Placename set (layer) the index is associated with</param>
            <param name="strWplFilePath">The full list file path</param>
        </member>
        <member name="M:WorldWind.WplIndex.ReadPlaceName(System.IO.BinaryReader,WorldWind.Renderable.WorldWindPlacename@,WorldWind.WplIndex.MetaDataAction)">
            <summary>
            utility routine: read a place info record from a BinaryReader
            </summary>
            <param name="br">Binary reader to read data from</param>
            <param name="pn">Where to write data</param>
            <param name="metaDataAction">What to do with metadata, read, skip, omit. The difference between skip and omit is that
            the latter is faster, while the former correctly positions to the next record if needed</param>
        </member>
        <member name="M:WorldWind.WplIndex.IsValidIndex(System.Int32)">
            <summary>
            Checks if an int is a valid index
            </summary>
            <param name="n">The value to check for validity</param>
            <returns>True if this index is within the bounds</returns>
        </member>
        <member name="M:WorldWind.WplIndex.CreateIndex(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Creates an index from placeitems
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Load(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Loads an index from file (implicitly known via the name of the wpl file)
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Lock(WorldWind.WplIndex.ProgressReportDelegate)">
            <summary>
            Locks the index: makes sure it is loaded and referenced
            </summary>
            <param name="pr">Callback to provide progress report</param>
        </member>
        <member name="M:WorldWind.WplIndex.Release">
            <summary>
            Releases index entries to give GC a chance to free up memory
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.GetPlaceItem(System.Int32)">
            <summary>
            Given an index position, seeks to and returns place information
            </summary>
            <param name="nIndex">Index of desired place</param>
            <returns></returns>
        </member>
        <member name="M:WorldWind.WplIndex.FindPlaceByName(System.String,System.Boolean)">
            <summary>
             Finds a place given its name.
            </summary>
            <param name="strPlaceName">The name to search for</param>
            <param name="bPartial">If true, will stop at first partial match</param>
            <returns></returns>
        </member>
        <member name="P:WorldWind.WplIndex.PlaceCount">
            <summary>
            Gets the number of places currently in this index
            </summary>
        </member>
        <member name="P:WorldWind.WplIndex.IsAvailable">
            <summary>
            True if this index is available (the index file exists)
            </summary>
        </member>
        <member name="P:WorldWind.WplIndex.IsLoaded">
            <summary>
            True if this index is loaded if the index entries are there 
            </summary>
        </member>
        <member name="T:WorldWind.WplIndex.IndexEntryToStringComparer">
            <summary>
            Utility class to compare index entries for binary search
            </summary>
        </member>
        <member name="M:WorldWind.WplIndex.IndexEntryToStringComparer.#ctor(WorldWind.WplIndex,System.Boolean)">
            <summary>
            Creates a new IndexEntryToStringComparer
            </summary>
            <param name="theIndex">The index the comparer will work withz</param>
            <param name="bPartialAllowed">Set to true if partial matches are allowed.</param>
        </member>
        <member name="M:WorldWind.WplIndex.IndexEntryToStringComparer.Compare(System.Object,System.Object)">
            <summary>
            Implements IComparer.Compare. Will compare either a WplIndexEntry or its numeric index (int)
            to a string (the name being searched for.
            </summary>
            <param name="x">The WplIndexEntry itself or its offset as an int</param>
            <param name="y">The name bein searched for as string</param>
            <returns></returns>
        </member>
        <member name="T:WorldWind.WplIndex.ProgressReportDelegate">
            <summary>
            Delegate type to report progress. 
            percentComplete is the total progress in % (from 0 to 100),
            currentAction is what is currently being done, e.g. in a multi-phase operation.
            </summary>
        </member>
        <member name="T:WorldWind.WplIndex.MetaDataAction">
            <summary>
            enum for ReadPlaceName: how to handle metadata
            </summary>
        </member>
    </members>
</doc>
